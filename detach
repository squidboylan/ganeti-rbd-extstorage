#!/usr/bin/env python
#
# Copyright (C) 2011 Greek Research and Technology Network
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

"""Unmap an rbd device from the Image it is mapped to

This program unmaps an rbd device from the Image it is mapped to.
It is idempotent if the mapping doesn't exist at all.

It takes it's input from environment variables. Specifically the
following variables should be present:

 - VOL_NAME: The name of the Image file to which the device points
 - POOL:     The RADOS pool in which the Image resides

Returns O upon successfull unmapping, 1 upon failure

"""

import os
import sys
import re

sys.path.insert(0, "/etc/ganeti/share")

from ganeti import utils


def ReadEnv():
  """Read the mandatory enviromental variables

  """
  name = os.getenv("VOL_NAME")
  if name is None:
    sys.stderr.write('The environment variable VOL_NAME is missing.\n')
    return None
#  pool = os.getenv("POOL")
  pool = "rbd"
  if pool is None:
    sys.stderr.write('The environment variable POOL is missing.\n')
    return None

  return (name, pool)


def main():
  env = ReadEnv()
  if env is None:
    sys.stderr.write('Wrong environment. Aborting...\n')
    return 1

  name, pool = env

  # Check if the mapping already exists
  cmd1 = ["rbd", "showmapped"]
  result = utils.RunCmd(cmd1)
  if result.failed:
    sys.stderr.write("rbd showmapped failed (%s): %s" %
                     (result.fail_reason, result.output))
    return 1
  else:
    cmd2 = "echo '%s' | grep %s | grep %s" % (result.output, pool, name)
    result = utils.RunCmd(cmd2)
    if not result.failed:
      # The mapping already exists.
      # Parse the result to find the rbd device
      try:
        rbd_dev = re.search("(/dev/rbd\d+)", result.output).group(1)
      except:
        sys.stderr.write("The rbd mapping exists but couldn't parse "
                         "the result of rbd showmapped to find the "
                         "corresponding rbd block device (/dev/rbd*)")
        return 1

      # Unmap the rbd device
      cmd = ["rbd", "unmap", "%s" % rbd_dev]
      result = utils.RunCmd(cmd)
      if result.failed:
        sys.stderr.write("rbd unmap failed (%s): %s" %
                         (result.fail_reason, result.output))
        return 1
     
      # Succesfull unmapping
      return 0

    else:
      # The mapping doesn't exist. Do nothing
      # ! Here there is a chance that echo or grep actually failed.
      # TODO: Zero that chance 
      return 0


if __name__ == "__main__":
    sys.exit(main())
